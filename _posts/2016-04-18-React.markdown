---
layout:     post
title:      "React"
date:       2016-04-18 12:00:00
author:     "Shi"
header-img: "img/post-bg-01.jpg"
---



# Properties

## PropTypes

Json

```
static propTypes = {
  link: React.PropTypes.shape({
    description: React.PropTypes.string.isRequired,
    url: React.PropTypes.string.isRequired,
    id: React.PropTypes.string.isRequired,
  }),
};
```



Array

```
static propTypes = {
  links: React.PropTypes.arrayOf(React.PropTypes.shape({
    description: React.PropTypes.string.isRequired,
    url: React.PropTypes.string.isRequired,
    id: React.PropTypes.string.isRequired,
  })),
};
```





# Handle Click

```
onDoorListRowClick(cell, row, rowIndex) {
  console.log('clicked', cell, row, rowIndex);
}

// OR

onDoorListRowClick=(cell, row, rowIndex) => {
  console.log('clicked', cell, row, rowIndex);
}


renderButton() {
  const { onLoginEmail } = this.props;

  return (
    <label htmlFor="LoginButton">
      <Button
        onClick={()=>this.onDoorListRowClick(1,2,3)}
      >
        Login button
      </Button>
    </label>
  );
}

```

# Debug

## Webstorm debug setting 

### For ['React-boilerplate'](https://github.com/react-boilerplate/react-boilerplate/blob/master/docs/general/debugging.md#debugging-with-webStorm)

1. [Install JetBrain Chrome Extension](https://chrome.google.com/webstore/detail/jetbrains-ide-support/hmhgeddbohgjknpmjagkdomcpobmllji)
2. Change WebPack devtool config to `source-map` [(This line)](https://github.com/react-boilerplate/react-boilerplate/blob/56eb5a0ec4aa691169ef427f3a0122fde5a5aa24/internals/webpack/webpack.dev.babel.js#L65)
3. Run web server (`npm run start`)
4. Create Run Configuration (Run > Edit Configurations) : Add new `JavaScript Debug`
   1. URL:   `http://localhost:3000`
   2. Map your `root` directory (`Remote URLs of local files`) with `webpack://.` 
5. ​Right click JetBrain plugin icon, click "Inspect In WebStorm"




# **react-bootstrap-table**

Search 

```
const options = {
  clearSearch: true
};

export default class SearchClearTable extends React.Component {
  render() {
    return (
      <BootstrapTable data={ products } search={ true } options={ options }>
          <TableHeaderColumn dataField='id' isKey>Product ID</TableHeaderColumn>
          <TableHeaderColumn dataField='name'>Product Name</TableHeaderColumn>
          <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>
      </BootstrapTable>
    );
  }
}
```



Action

http://allenfang.github.io/react-bootstrap-table/example.html#manipulation



```
class ExportCSVTable extends React.Component {
  render() {
    return (
      <BootstrapTable data={ products } exportCSV={ true }>
          <TableHeaderColumn dataField='id' isKey hidden export>Product ID</TableHeaderColumn>
          <TableHeaderColumn dataField='name'>Product Name</TableHeaderColumn>
          <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>
          <TableHeaderColumn dataField='action' export={ false }>Action</TableHeaderColumn>
      </BootstrapTable>
    );
  }
}
```



Export

https://github.com/AllenFang/react-bootstrap-table/blob/3ce59bf44b50aecd49fc27a2b73d4b7b23e5157c/examples/js/custom/csv-button/custom-csv-or-tsv-button.js



```
class ExportCSVTable extends React.Component {
  render() {
    return (
      <BootstrapTable data={ products } exportCSV={ true }>
          <TableHeaderColumn dataField='id' isKey hidden export>Product ID</TableHeaderColumn>
          <TableHeaderColumn dataField='name'>Product Name</TableHeaderColumn>
          <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>
          <TableHeaderColumn dataField='action' export={ false }>Action</TableHeaderColumn>
      </BootstrapTable>
    );
  }
}
```

### Hover, Striped, Condensed Table

```
class HoverStripedTable extends React.Component {
  render() {
    return (
      <BootstrapTable data={ products } striped hover condensed>
          <TableHeaderColumn dataField='id' isKey>Product ID</TableHeaderColumn>
          <TableHeaderColumn dataField='name'>Product Name</TableHeaderColumn>
          <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>
      </BootstrapTable>
    );
  }
}
```

### Large Table

```
class LargeColumnTable extends React.Component {
  render() {
    return (
      <BootstrapTable data={ products }>
          <TableHeaderColumn width='150' dataField='id' isKey>ProductID</TableHeaderColumn>
          <TableHeaderColumn width='150' dataField='name'>ProductName</TableHeaderColumn>
          <TableHeaderColumn width='150' dataField='price'>ProductPrice</TableHeaderColumn>
          <TableHeaderColumn width='150' dataField='name'>ProductName</TableHeaderColumn>
          <TableHeaderColumn width='150' dataField='price'>ProductPrice</TableHeaderColumn>
          <TableHeaderColumn width='150' dataField='name'>ProductName</TableHeaderColumn>
          <TableHeaderColumn width='150' dataField='price'>ProductPrice</TableHeaderColumn>
          <TableHeaderColumn width='150' dataField='name'>ProductName</TableHeaderColumn>
          <TableHeaderColumn width='150' dataField='price'>ProductPrice</TableHeaderColumn>
          <TableHeaderColumn width='150' dataField='name'>ProductName</TableHeaderColumn>
          <TableHeaderColumn width='150' dataField='price'>ProductPrice</TableHeaderColumn>
          <TableHeaderColumn width='150' dataField='name'>ProductName</TableHeaderColumn>
      </BootstrapTable>
    );
  }
}
```

### Scroll Table

```
class ScrollTable extends React.Component {
  render() {
    return (
      <BootstrapTable data={ products } height='120' scrollTop={ 'Bottom' }> <!-- Available value is Top, Bottom or any number value -->
          <TableHeaderColumn dataField='id' isKey>Product ID</TableHeaderColumn>
          <TableHeaderColumn dataField='name'>Product Name</TableHeaderColumn>
          <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>
      </BootstrapTable>
    );
  }
}
```

Sort

```
class DefaultSortTable extends React.Component {
  constructor(props) {
    super(props);

    this.options = {
      defaultSortName: 'name',  // default sort column name
      defaultSortOrder: 'desc'  // default sort order
    };
  }

  render() {
    return (
      <div>
        <BootstrapTable data={ products } options={ this.options } multiColumnSort={ 2 }>
          <TableHeaderColumn dataField='id' isKey dataSort>Product ID</TableHeaderColumn>
          <TableHeaderColumn dataField='name' dataSort>Product Name</TableHeaderColumn>
          <TableHeaderColumn dataField='price'>Product Price</TableHeaderColumn>
        </BootstrapTable>
      </div>
    );
  }
}
```



# react-router-dom

https://css-tricks.com/react-router-4/

react-router API

https://reacttraining.com/react-router/web/api

Auth

https://themeteorchef.com/tutorials/getting-started-with-react-router-v4





 `<BrowserRouter>` should be used when you have a server that will handle dynamic requests (knows how to respond to any possible URI).

 `<HashRouter>` should be used for static websites (can only respond to requests for files that it knows about).

##  `<Route>` 

`<Route>` component is the main building block of React Router. Anywhere that you want to only render something if it matches the location’s pathname, you should create a `<Route>` element.

`<Route>`  expects a `path` prop string that describes the type of pathname that the route matches — for example, `<Route path='/roster'/>` should match a pathname that begins with `/roster`



we strategically place the routes for`/users/add` before `/users` to ensure the correct matching. Since the path `/users/add` would match for `/users` and `/users/add`, putting the `/users/add` first is best.





# Tools

### [Redux DevTools](https://chrome.google.com/webstore/detail/redux-devtools/lmhkpmbekcpmknklioeibfkpmmfibljd)

Check installed NPM package version `npm list --depth=0`



## Yarn

npm install -g yarn

## Webstorm Set indent to 2 space
File name: .editorconfig

```javascript
# editorconfig.org
root = true

[*]
indent_style = space
indent_size = 2
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

[*.md]
trim_trailing_whitespace = false
```

## Webpack
### webpack is a module bundler. This means webpack takes modules with dependencies and emits static assets representing those modules.

Configuration file is: webpack.config.dev.js

```javascript
import webpack from 'webpack';
import path from 'path';

export default {
  debug: true,
  devtool: 'cheap-module-eval-source-map',
  noInfo: false, //Prod: set to true
  entry: [
    'eventsource-polyfill', // necessary for hot reloading with IE
    'webpack-hot-middleware/client?reload=true', //For hot reload. Note that it reloads the page if hot module reloading fails.
    './src/index'
  ],
  target: 'web',
  output: { //Webpack do not generate any code, but we should put it here
    path: __dirname + '/dist', // Note: Physical files are only output by the production build task `npm run build`.
    publicPath: '/',
    filename: 'bundle.js'
  },
  devServer: {
    contentBase: './src'
  },
  plugins: [
    new webpack.HotModuleReplacementPlugin(), //Hot replace module 
    new webpack.NoErrorsPlugin()
  ],
  module: { // Tell webpack the type of files we handle
    loaders: [
      {test: /\.js$/, include: path.join(__dirname, 'src'), loaders: ['babel']},
      {test: /(\.css)$/, loaders: ['style', 'css']},
      {test: /\.eot(\?v=\d+\.\d+\.\d+)?$/, loader: 'file'},
      {test: /\.(woff|woff2)$/, loader: 'url?prefix=font/&limit=5000'},
      {test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/, loader: 'url?limit=10000&mimetype=application/octet-stream'},
      {test: /\.svg(\?v=\d+\.\d+\.\d+)?$/, loader: 'url?limit=10000&mimetype=image/svg+xml'}
    ]
  }
};
```

# Note

## React Skeleton

[react-boilerplate](https://github.com/react-boilerplate/react-boilerplate)

[react-starter-kit](https://github.com/kriasoft/react-starter-kit)

[Official Tutorial](https://reactjs.org/tutorial/tutorial.html)

[Pluralsight-redux-starter](https://github.com/coryhouse/pluralsight-redux-starter)
[React-slingshot](https://github.com/coryhouse/react-slingshot)

[React boilerplate by Facebook](https://github.com/facebookincubator/create-react-app)

## Starter tutorial

http://chenglou.github.io/react/docs/reusable-components.html#mixins

https://teropa.info/blog/2015/09/10/full-stack-redux-tutorial.html

https://www.sitepoint.com/how-to-build-a-todo-app-using-react-redux-and-immutable-js/

great redux course: https://egghead.io/courses/getting-started-with-redux

https://www.fullstackreact.com/articles/react-tutorial-cloning-yelp/

test case on angular
